#!/usr/bin/env python
"""
Usage:
    jdot arith <m> <n> <d>
    jdot bfs <limits> <target>
    jdot wine <m> <s>
"""

import docopt
import juggo.plotting as plotting
from juggo.arithmetic import find_transforms
from juggo.bfs import all_paths
from juggo.utils import vectors_eq
from juggo.wine import solve


def nextprev(path):
    path = iter(path)
    prev = next(path, None)
    for item in path:
        yield prev, item
        prev = item


def plot(edges, path):
    return plotting.pipeline(edges, [
        plotting.plot,
        plotting.add_trace('red', path),
        plotting.to_string,
    ])


def plot_arithmetic(m, n, d):
    path = list(find_transforms(m, n, d))
    return plot(nextprev(path), path)


def plot_bfs(max_caps, target):
    M = []
    S = []
    initial = (0,) * len(max_caps)
    for u, v, path in all_paths(initial, max_caps):
        M.append((u, v))
        if vectors_eq(v, target):
            S = path
            break
    return plot(M, S)


def plot_wine(m, s):
    path = list(solve(m, s))
    return plot(nextprev(path), path)


if __name__ == '__main__':
    args = docopt.docopt(__doc__)
    if args['arith']:
        print(plot_arithmetic(
            int(args['<m>']),
            int(args['<n>']),
            int(args['<d>']),
        ))
    elif args['bfs']:
        print(plot_bfs(
            [int(k) for k in args['<limits>'].split(',')],
            [None if k == '-' else int(k) for k in args['<target>'].split(',')],
        ))
    elif args['wine']:
        print(plot_wine(
            int(args['<m>']),
            int(args['<s>']),
        ))
