#!/usr/bin/env python
"""
Usage:
    jdot arith <m> <n> <d>
    jdot bfs <limits> <target>
"""

import docopt
import juggo.plotting as plotting
from juggo.arithmetic import find_transforms
from juggo.bfs import all_paths
from juggo.utils import vectors_eq


def plot_arithmetic(m, n, d):
    path = list(find_transforms(m, n, d))
    def ipath(xs):
        for i in range(1, len(xs)):
            yield xs[i-1], xs[i]

    return plotting.pipeline(ipath(path), [
        plotting.plot,
        plotting.add_trace('red', path),
        plotting.to_string,
    ])


def plot_bfs(max_caps, target):
    M = []
    S = []
    initial = (0,) * len(max_caps)
    for u, v, path in all_paths(initial, max_caps):
        M.append((u, v))
        if vectors_eq(v, target):
            S = path
            break
    return plotting.pipeline(M, [
        plotting.plot,
        plotting.add_trace('red', S),
        plotting.to_string,
    ])


if __name__ == '__main__':
    args = docopt.docopt(__doc__)
    if args['arith']:
        print(plot_arithmetic(
            int(args['<m>']),
            int(args['<n>']),
            int(args['<d>']),
        ))
    elif args['bfs']:
        print(plot_bfs(
            [int(k) for k in args['<limits>'].split(',')],
            [None if k == '-' else int(k) for k in args['<target>'].split(',')],
        ))
